#lang racket

(define (make-variable)
  (let ((value 0)
        (grad 0)
        (forward '())
        (backward '()))
    (define (call-each actions)
      (if (null? actions)
          'done
          (begin
            ((car actions))
            (call-each (cdr actions)))))
    (define (set-value! new-value)
      (set! value new-value)
      (call-each forward))

    (define (set-grad! new-grad)
      (set! grad new-grad)
      (call-each backward))
    
    (define (add-forward! proc)
      (set! forward (cons proc forward)))
    (define (add-backward! proc)
      (set! backward (cons proc backward)))
    
    (define (dispatch m)
      (cond ((eq? m 'get-value) value)
            ((eq? m 'get-grad) grad)
            ((eq? m 'set-value!) set-value!)
            ((eq? m 'set-grad!) set-grad!)
            ((eq? m 'add-forward!) add-forward!)
            ((eq? m 'add-backward!) add-backward!)
            (else (display "error"))))
    dispatch))

(define (get-value v)
  (v 'get-value))
(define (get-grad v)
  (v 'get-grad))
(define (set-value! v new-value)
  ((v 'set-value!) new-value))
(define (set-grad! v new-grad)
  ((v 'set-grad!) new-grad))
(define (add-forward! v proc)
  ((v 'add-forward!) proc))
(define (add-backward! v proc)
  ((v 'add-backward!) proc))

(define (add-op in-1 in-2 out)
  (define (operator)
    (let ((new-value (+ (get-value in-1)
                        (get-value in-2))))
      (set-value! out new-value)))
  (define (take-grad)
    (let ((new-grad (get-grad out)))
      (set-grad! in-1 new-grad)
      (set-grad! in-2 new-grad)))
  
  (add-forward! in-1 operator)
  (add-forward! in-2 operator)

  (add-backward! out take-grad))

(define (mul-op in-1 in-2 out)
  (define (operator)
    (let ((new-value (* (get-value in-1)
                        (get-value in-2))))
      (set-value! out new-value)))

  (define (take-grad)
    (let* ((out-grad (get-grad out))
          (in-1-grad (* (get-value in-2) out-grad))
          (in-2-grad (* (get-value in-1) out-grad)))
      (set-grad! in-1 in-1-grad)
      (set-grad! in-2 in-2-grad)))
    
  (add-forward! in-1 operator)
  (add-forward! in-2 operator)

  (add-backward! out take-grad))
  
(define x (make-variable))
(define y (make-variable))
(define z (make-variable))
(define q (make-variable))
(define f (make-variable))

(add-op x y q)
(mul-op q z f)

(set-value! x -2)
(set-value! y 5)
(set-value! z -4)
(display (get-value f))

(set-grad! f 1)
;(display (get-grad q))
;(display "\n")
(display (get-grad x))
(display "\n")
(display (get-grad y))
(display "\n")
(display (get-grad z))